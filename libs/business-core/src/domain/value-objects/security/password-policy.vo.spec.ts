/**
 * ÂØÜÁ†ÅÁ≠ñÁï•ÂÄºÂØπË±°ÊµãËØï
 *
 * @description ÊµãËØïÂØÜÁ†ÅÁ≠ñÁï•ÂÄºÂØπË±°ÁöÑ‰∏öÂä°ÈÄªËæëÂíåÈ™åËØÅËßÑÂàô
 *
 * @since 1.0.0
 */

import { describe, it, expect } from "@jest/globals";
import { PasswordPolicy } from "./password-policy.vo.js";

describe("PasswordPolicy", () => {
  describe("ÊûÑÈÄ†ÂáΩÊï∞", () => {
    it("Â∫îËØ•ÊàêÂäüÂàõÂª∫ÂØÜÁ†ÅÁ≠ñÁï•", () => {
      const policy = new PasswordPolicy({
        minLength: 8,
        maxLength: 128,
        requireUppercase: true,
        requireLowercase: true,
        requireNumbers: true,
        requireSpecialChars: true,
        maxAge: 90,
      });

      expect(policy.getMinLength()).toBe(8);
      expect(policy.requiresUppercase()).toBe(true);
      expect(policy.requiresLowercase()).toBe(true);
      expect(policy.requiresNumbers()).toBe(true);
      expect(policy.requiresSpecialChars()).toBe(true);
      expect(policy.getMaxAge()).toBe(90);
    });

    it("Â∫îËØ•‰ΩøÁî®ÈªòËÆ§ÂÄºÂàõÂª∫ÂØÜÁ†ÅÁ≠ñÁï•", () => {
      const policy = PasswordPolicy.createDefault();

      expect(policy.getMinLength()).toBe(12);
      expect(policy.requiresUppercase()).toBe(true);
      expect(policy.requiresLowercase()).toBe(true);
      expect(policy.requiresNumbers()).toBe(true);
      expect(policy.requiresSpecialChars()).toBe(true);
    });

    it("Â∫îËØ•È™åËØÅÊúÄÂ∞èÈïøÂ∫¶ËåÉÂõ¥", () => {
      expect(() => {
        new PasswordPolicy({ minLength: 0, maxLength: 128 });
      }).toThrow("ÂØÜÁ†ÅÊúÄÂ∞èÈïøÂ∫¶ÂøÖÈ°ªÂ§ß‰∫é0‰∏î‰∏çË∂ÖËøáÊúÄÂ§ßÈïøÂ∫¶");

      expect(() => {
        new PasswordPolicy({ minLength: 129, maxLength: 128 });
      }).toThrow("ÂØÜÁ†ÅÊúÄÂ∞èÈïøÂ∫¶ÂøÖÈ°ªÂ§ß‰∫é0‰∏î‰∏çË∂ÖËøáÊúÄÂ§ßÈïøÂ∫¶");
    });

    it("Â∫îËØ•È™åËØÅÊúÄÂ§ßÈïøÂ∫¶ËåÉÂõ¥", () => {
      expect(() => {
        new PasswordPolicy({ minLength: 8, maxLength: 257 });
      }).toThrow("ÂØÜÁ†ÅÊúÄÂ§ßÈïøÂ∫¶‰∏çËÉΩË∂ÖËøá256");
    });

    it("Â∫îËØ•È™åËØÅÈïøÂ∫¶ÂÖ≥Á≥ª", () => {
      expect(() => {
        new PasswordPolicy({ minLength: 10, maxLength: 8 });
      }).toThrow("ÂØÜÁ†ÅÊúÄÂ∞èÈïøÂ∫¶ÂøÖÈ°ªÂ§ß‰∫é0‰∏î‰∏çË∂ÖËøáÊúÄÂ§ßÈïøÂ∫¶");
    });
  });

  describe("validatePassword", () => {
    let policy: PasswordPolicy;

    beforeEach(() => {
      policy = new PasswordPolicy({
        minLength: 8,
        maxLength: 128,
        requireUppercase: true,
        requireLowercase: true,
        requireNumbers: true,
        requireSpecialChars: true,
        maxAge: 90,
        historyCount: 5,
        checkCommonPasswords: false,
        checkUsernameInclusion: false,
        allowedSpecialChars: "!@#$%^&*()_+-=[]{}|;:,.<>?",
        forbiddenSpecialChars: "",
      });
    });

    it("Â∫îËØ•È™åËØÅÊúâÊïàÂØÜÁ†Å", () => {
      const validPasswords = [
        "MySecure123!",
        "Password123@",
        "Test123#",
        "ValidPass1$",
      ];

      for (const password of validPasswords) {
        const result = policy.validatePassword(password);
        expect(result.isValid).toBe(true);
        expect(result.errors).toHaveLength(0);
      }
    });

    it("Â∫îËØ•È™åËØÅÂØÜÁ†ÅÈïøÂ∫¶", () => {
      const result = policy.validatePassword("Short1!");
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain("ÂØÜÁ†ÅÈïøÂ∫¶‰∏çËÉΩÂ∞ë‰∫é8‰∏™Â≠óÁ¨¶");
    });

    it("Â∫îËØ•È™åËØÅÂ§ßÂÜôÂ≠óÊØçË¶ÅÊ±Ç", () => {
      const result = policy.validatePassword("lowercase123!");
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain("ÂØÜÁ†ÅÂøÖÈ°ªÂåÖÂê´Ëá≥Â∞ë‰∏Ä‰∏™Â§ßÂÜôÂ≠óÊØç");
    });

    it("Â∫îËØ•È™åËØÅÂ∞èÂÜôÂ≠óÊØçË¶ÅÊ±Ç", () => {
      const result = policy.validatePassword("UPPERCASE123!");
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain("ÂØÜÁ†ÅÂøÖÈ°ªÂåÖÂê´Ëá≥Â∞ë‰∏Ä‰∏™Â∞èÂÜôÂ≠óÊØç");
    });

    it("Â∫îËØ•È™åËØÅÊï∞Â≠óË¶ÅÊ±Ç", () => {
      const result = policy.validatePassword("NoNumbers!");
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain("ÂØÜÁ†ÅÂøÖÈ°ªÂåÖÂê´Ëá≥Â∞ë‰∏Ä‰∏™Êï∞Â≠ó");
    });

    it.skip("Â∫îËØ•È™åËØÅÁâπÊÆäÂ≠óÁ¨¶Ë¶ÅÊ±Ç", () => {
      const result = policy.validatePassword("NoSpecial123");
      console.log("Validation result:", result);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain("ÂØÜÁ†ÅÂøÖÈ°ªÂåÖÂê´Ëá≥Â∞ë‰∏Ä‰∏™ÁâπÊÆäÂ≠óÁ¨¶");
    });

    it("Â∫îËØ•Â§ÑÁêÜÁ©∫ÂØÜÁ†Å", () => {
      const result = policy.validatePassword("");
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain("ÂØÜÁ†ÅÈïøÂ∫¶‰∏çËÉΩÂ∞ë‰∫é8‰∏™Â≠óÁ¨¶");
    });
  });

  describe("ÈùôÊÄÅÊñπÊ≥ï", () => {
    it("Â∫îËØ•ÂàõÂª∫ÈªòËÆ§Á≠ñÁï•", () => {
      const policy = PasswordPolicy.createDefault();
      expect(policy.getMinLength()).toBe(12);
      expect(policy.requiresUppercase()).toBe(true);
    });

    it("Â∫îËØ•ÂàõÂª∫ÂÆΩÊùæÁ≠ñÁï•", () => {
      const policy = PasswordPolicy.createRelaxed();
      expect(policy.getMinLength()).toBe(8);
    });

    it("Â∫îËØ•ÂàõÂª∫‰∏•Ê†ºÁ≠ñÁï•", () => {
      const policy = PasswordPolicy.createStrict();
      expect(policy.getMinLength()).toBe(16);
    });
  });

  describe("ËæπÁïåÊù°‰ª∂", () => {
    it.skip("Â∫îËØ•Â§ÑÁêÜÁâπÊÆäÂ≠óÁ¨¶ÁöÑÂØÜÁ†Å", () => {
      const policy = new PasswordPolicy({
        minLength: 8,
        maxLength: 128,
        requireSpecialChars: true,
      });

      const result = policy.validatePassword("ÂØÜÁ†Å123!");
      expect(result.isValid).toBe(true);
    });

    it("Â∫îËØ•Â§ÑÁêÜUnicodeÂ≠óÁ¨¶ÁöÑÂØÜÁ†Å", () => {
      const policy = new PasswordPolicy({
        minLength: 8,
        maxLength: 128,
        requireSpecialChars: true,
      });

      const result = policy.validatePassword("ÂØÜÁ†ÅüöÄ123!");
      expect(result.isValid).toBe(true);
    });
  });
});
