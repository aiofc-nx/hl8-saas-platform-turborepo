openapi: 3.0.3
info:
  title: SAAS 平台核心模块重构 API
  description: |
    基于 HL8 SAAS 平台宪章的核心模块重构 API 规范。
    
    ## 重构目标
    - 清理 hybrid-archi 架构基础库中的业务特定组件
    - 处理 libs/isolation-model 与 hybrid-archi 的重叠内容
    - 重构 saas-core 业务模块以适配新的基础设施模块
    - 建立清晰的模块边界和职责划分
    
    ## 架构原则
    - Clean Architecture + DDD + CQRS + ES + EDA
    - 中文优先原则
    - 代码即文档原则
    - 统一语言原则
  version: 1.0.0
  contact:
    name: HL8 SAAS Platform Team
    email: dev@hl8.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.hl8.com/v1
    description: 生产环境
  - url: https://staging-api.hl8.com/v1
    description: 测试环境

tags:
  - name: 模块分析
    description: 模块分析和重叠内容检测
  - name: 重构管理
    description: 重构过程和状态管理
  - name: 依赖管理
    description: 模块依赖关系管理
  - name: 测试验证
    description: 重构后的测试和验证

paths:
  /modules/analysis:
    post:
      tags:
        - 模块分析
      summary: 分析模块重叠内容
      description: 分析 libs/isolation-model 与 hybrid-archi 的重叠内容
      operationId: analyzeModuleOverlap
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModuleAnalysisRequest'
      responses:
        '200':
          description: 分析结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModuleAnalysisResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /modules/{moduleName}/clean:
    post:
      tags:
        - 重构管理
      summary: 清理模块业务特定组件
      description: 从 hybrid-archi 中移除业务特定组件
      operationId: cleanModuleBusinessComponents
      parameters:
        - name: moduleName
          in: path
          required: true
          description: 模块名称
          schema:
            type: string
            enum: [hybrid-archi, saas-core, isolation-model]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CleanModuleRequest'
      responses:
        '200':
          description: 清理结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CleanModuleResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /modules/{moduleName}/dependencies:
    put:
      tags:
        - 依赖管理
      summary: 更新模块依赖配置
      description: 更新 saas-core 的依赖配置以适配新的基础设施模块
      operationId: updateModuleDependencies
      parameters:
        - name: moduleName
          in: path
          required: true
          description: 模块名称
          schema:
            type: string
            enum: [saas-core]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDependenciesRequest'
      responses:
        '200':
          description: 依赖更新结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UpdateDependenciesResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /refactoring/status:
    get:
      tags:
        - 重构管理
      summary: 获取重构状态
      description: 获取当前重构过程的整体状态
      operationId: getRefactoringStatus
      responses:
        '200':
          description: 重构状态
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefactoringStatusResponse'
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /refactoring/validate:
    post:
      tags:
        - 测试验证
      summary: 验证重构结果
      description: 验证重构后的模块功能和边界
      operationId: validateRefactoringResult
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ValidationRequest'
      responses:
        '200':
          description: 验证结果
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationResponse'
        '400':
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    ModuleAnalysisRequest:
      type: object
      required:
        - sourceModule
        - targetModule
        - analysisType
      properties:
        sourceModule:
          type: string
          description: 源模块名称
          enum: [hybrid-archi]
        targetModule:
          type: string
          description: 目标模块名称
          enum: [isolation-model]
        analysisType:
          type: string
          description: 分析类型
          enum: [domain-layer, business-components, interfaces]
        options:
          type: object
          description: 分析选项
          properties:
            includeTests:
              type: boolean
              description: 是否包含测试文件
              default: true
            includeDocumentation:
              type: boolean
              description: 是否包含文档文件
              default: true
            depth:
              type: integer
              description: 分析深度
              minimum: 1
              maximum: 5
              default: 3

    ModuleAnalysisResponse:
      type: object
      required:
        - analysisId
        - status
        - overlaps
        - recommendations
      properties:
        analysisId:
          type: string
          description: 分析ID
          example: "analysis_20250127_001"
        status:
          type: string
          description: 分析状态
          enum: [completed, failed, partial]
        overlaps:
          type: array
          description: 重叠内容列表
          items:
            $ref: '#/components/schemas/OverlapItem'
        recommendations:
          type: array
          description: 处理建议
          items:
            $ref: '#/components/schemas/Recommendation'
        analysisTime:
          type: string
          format: date-time
          description: 分析完成时间

    OverlapItem:
      type: object
      required:
        - componentName
        - componentType
        - overlapType
        - severity
      properties:
        componentName:
          type: string
          description: 组件名称
          example: "TenantStatus"
        componentType:
          type: string
          description: 组件类型
          enum: [class, interface, enum, type, function]
        overlapType:
          type: string
          description: 重叠类型
          enum: [exact-match, similar-logic, shared-dependencies]
        severity:
          type: string
          description: 严重程度
          enum: [high, medium, low]
        sourceLocation:
          type: string
          description: 源文件位置
          example: "libs/hybrid-archi/src/domain/tenant-status.ts"
        targetLocation:
          type: string
          description: 目标文件位置
          example: "libs/isolation-model/src/models/tenant-status.ts"
        description:
          type: string
          description: 重叠内容描述

    Recommendation:
      type: object
      required:
        - action
        - reason
        - priority
      properties:
        action:
          type: string
          description: 建议操作
          enum: [preserve, migrate, refactor, remove]
        reason:
          type: string
          description: 建议原因
        priority:
          type: string
          description: 优先级
          enum: [high, medium, low]
        steps:
          type: array
          description: 执行步骤
          items:
            type: string
        estimatedEffort:
          type: string
          description: 预估工作量
          example: "2-4 hours"

    CleanModuleRequest:
      type: object
      required:
        - moduleName
        - componentsToRemove
      properties:
        moduleName:
          type: string
          description: 模块名称
          enum: [hybrid-archi]
        componentsToRemove:
          type: array
          description: 要移除的组件列表
          items:
            type: string
          example: ["TenantStatus", "OrganizationStatus"]
        migrationTarget:
          type: string
          description: 迁移目标模块
          enum: [saas-core, isolation-model]
        options:
          type: object
          description: 清理选项
          properties:
            backupBeforeClean:
              type: boolean
              description: 清理前是否备份
              default: true
            validateAfterClean:
              type: boolean
              description: 清理后是否验证
              default: true

    CleanModuleResponse:
      type: object
      required:
        - cleanId
        - status
        - removedComponents
        - migratedComponents
      properties:
        cleanId:
          type: string
          description: 清理ID
          example: "clean_20250127_001"
        status:
          type: string
          description: 清理状态
          enum: [completed, failed, partial]
        removedComponents:
          type: array
          description: 已移除的组件
          items:
            type: string
        migratedComponents:
          type: array
          description: 已迁移的组件
          items:
            $ref: '#/components/schemas/MigratedComponent'
        cleanupTime:
          type: string
          format: date-time
          description: 清理完成时间

    MigratedComponent:
      type: object
      required:
        - componentName
        - sourceModule
        - targetModule
        - status
      properties:
        componentName:
          type: string
          description: 组件名称
        sourceModule:
          type: string
          description: 源模块
        targetModule:
          type: string
          description: 目标模块
        status:
          type: string
          description: 迁移状态
          enum: [completed, failed, pending]
        migrationPath:
          type: string
          description: 迁移路径

    UpdateDependenciesRequest:
      type: object
      required:
        - moduleName
        - oldDependencies
        - newDependencies
      properties:
        moduleName:
          type: string
          description: 模块名称
          enum: [saas-core]
        oldDependencies:
          type: array
          description: 旧依赖列表
          items:
            type: string
          example: ["@hl8/database", "@hl8/cache", "@hl8/logger", "@hl8/multi-tenancy"]
        newDependencies:
          type: array
          description: 新依赖列表
          items:
            type: string
          example: ["@hl8/database", "@hl8/caching", "@hl8/nestjs-fastify/logging", "@hl8/nestjs-isolation", "@hl8/exceptions"]
        options:
          type: object
          description: 更新选项
          properties:
            validateCompatibility:
              type: boolean
              description: 是否验证兼容性
              default: true
            updateTests:
              type: boolean
              description: 是否更新测试
              default: true
            updateDocumentation:
              type: boolean
              description: 是否更新文档
              default: true

    UpdateDependenciesResponse:
      type: object
      required:
        - updateId
        - status
        - updatedDependencies
      properties:
        updateId:
          type: string
          description: 更新ID
          example: "update_20250127_001"
        status:
          type: string
          description: 更新状态
          enum: [completed, failed, partial]
        updatedDependencies:
          type: array
          description: 已更新的依赖
          items:
            $ref: '#/components/schemas/DependencyUpdate'
        updateTime:
          type: string
          format: date-time
          description: 更新完成时间

    DependencyUpdate:
      type: object
      required:
        - dependencyName
        - oldVersion
        - newVersion
        - status
      properties:
        dependencyName:
          type: string
          description: 依赖名称
        oldVersion:
          type: string
          description: 旧版本
        newVersion:
          type: string
          description: 新版本
        status:
          type: string
          description: 更新状态
          enum: [updated, failed, skipped]
        compatibilityIssues:
          type: array
          description: 兼容性问题
          items:
            type: string

    RefactoringStatusResponse:
      type: object
      required:
        - overallStatus
        - currentPhase
        - modules
      properties:
        overallStatus:
          type: string
          description: 整体状态
          enum: [not-started, in-progress, completed, failed]
        currentPhase:
          type: string
          description: 当前阶段
          enum: [analysis, planning, cleaning, overlap-handling, migration, testing, documentation, completed]
        modules:
          type: array
          description: 模块状态
          items:
            $ref: '#/components/schemas/ModuleStatus'
        progress:
          type: object
          description: 进度信息
          properties:
            completed:
              type: integer
              description: 已完成任务数
            total:
              type: integer
              description: 总任务数
            percentage:
              type: number
              description: 完成百分比
              minimum: 0
              maximum: 100

    ModuleStatus:
      type: object
      required:
        - moduleName
        - status
        - tasks
      properties:
        moduleName:
          type: string
          description: 模块名称
        status:
          type: string
          description: 模块状态
          enum: [pending, in-progress, completed, failed]
        tasks:
          type: array
          description: 任务列表
          items:
            $ref: '#/components/schemas/TaskStatus'
        lastUpdated:
          type: string
          format: date-time
          description: 最后更新时间

    TaskStatus:
      type: object
      required:
        - taskName
        - status
        - priority
      properties:
        taskName:
          type: string
          description: 任务名称
        status:
          type: string
          description: 任务状态
          enum: [pending, in-progress, completed, failed, skipped]
        priority:
          type: string
          description: 优先级
          enum: [high, medium, low]
        estimatedEffort:
          type: string
          description: 预估工作量
        actualEffort:
          type: string
          description: 实际工作量
        assignee:
          type: string
          description: 负责人

    ValidationRequest:
      type: object
      required:
        - validationType
        - modules
      properties:
        validationType:
          type: string
          description: 验证类型
          enum: [functionality, boundaries, dependencies, performance, documentation]
        modules:
          type: array
          description: 要验证的模块
          items:
            type: string
        options:
          type: object
          description: 验证选项
          properties:
            includePerformance:
              type: boolean
              description: 是否包含性能测试
              default: true
            includeIntegration:
              type: boolean
              description: 是否包含集成测试
              default: true
            testCoverage:
              type: number
              description: 测试覆盖率要求
              minimum: 0
              maximum: 100
              default: 80

    ValidationResponse:
      type: object
      required:
        - validationId
        - status
        - results
      properties:
        validationId:
          type: string
          description: 验证ID
          example: "validation_20250127_001"
        status:
          type: string
          description: 验证状态
          enum: [passed, failed, partial]
        results:
          type: array
          description: 验证结果
          items:
            $ref: '#/components/schemas/ValidationResult'
        validationTime:
          type: string
          format: date-time
          description: 验证完成时间

    ValidationResult:
      type: object
      required:
        - moduleName
        - validationType
        - status
        - score
      properties:
        moduleName:
          type: string
          description: 模块名称
        validationType:
          type: string
          description: 验证类型
          enum: [functionality, boundaries, dependencies, performance, documentation]
        status:
          type: string
          description: 验证状态
          enum: [passed, failed, warning]
        score:
          type: number
          description: 验证分数
          minimum: 0
          maximum: 100
        details:
          type: array
          description: 详细结果
          items:
            type: string
        recommendations:
          type: array
          description: 改进建议
          items:
            type: string

    ErrorResponse:
      type: object
      required:
        - error
        - message
        - timestamp
      properties:
        error:
          type: string
          description: 错误类型
          example: "ValidationError"
        message:
          type: string
          description: 错误消息
          example: "请求参数验证失败"
        details:
          type: string
          description: 错误详情
        timestamp:
          type: string
          format: date-time
          description: 错误发生时间
        requestId:
          type: string
          description: 请求ID
          example: "req_20250127_001"

security:
  - ApiKeyAuth: []
  - BearerAuth: []

securitySchemes:
  ApiKeyAuth:
    type: apiKey
    in: header
    name: X-API-Key
    description: API 密钥认证
  BearerAuth:
    type: http
    scheme: bearer
    bearerFormat: JWT
    description: JWT 令牌认证
